# coding: utf-8

"""
    QQAPP API

    QQAPP API Description  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CourseList(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'client': 'Client',
        'total_consumed_lessons': 'int',
        'remaining_lessons': 'int',
        'total_lessons': 'int',
        'course_name': 'str',
        'class_length': 'int',
        'class_fee': 'int',
        'color': 'str',
        'create_time': 'datetime',
        'update_time': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'client': 'client',
        'total_consumed_lessons': 'total_consumed_lessons',
        'remaining_lessons': 'remaining_lessons',
        'total_lessons': 'total_lessons',
        'course_name': 'course_name',
        'class_length': 'class_length',
        'class_fee': 'class_fee',
        'color': 'color',
        'create_time': 'create_time',
        'update_time': 'update_time'
    }

    def __init__(self, id=None, client=None, total_consumed_lessons=None, remaining_lessons=None, total_lessons=None, course_name=None, class_length=None, class_fee=None, color=None, create_time=None, update_time=None):  # noqa: E501
        """CourseList - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._client = None
        self._total_consumed_lessons = None
        self._remaining_lessons = None
        self._total_lessons = None
        self._course_name = None
        self._class_length = None
        self._class_fee = None
        self._color = None
        self._create_time = None
        self._update_time = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if client is not None:
            self.client = client
        if total_consumed_lessons is not None:
            self.total_consumed_lessons = total_consumed_lessons
        if remaining_lessons is not None:
            self.remaining_lessons = remaining_lessons
        if total_lessons is not None:
            self.total_lessons = total_lessons
        self.course_name = course_name
        self.class_length = class_length
        self.class_fee = class_fee
        if color is not None:
            self.color = color
        if create_time is not None:
            self.create_time = create_time
        if update_time is not None:
            self.update_time = update_time

    @property
    def id(self):
        """Gets the id of this CourseList.  # noqa: E501


        :return: The id of this CourseList.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CourseList.


        :param id: The id of this CourseList.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def client(self):
        """Gets the client of this CourseList.  # noqa: E501


        :return: The client of this CourseList.  # noqa: E501
        :rtype: Client
        """
        return self._client

    @client.setter
    def client(self, client):
        """Sets the client of this CourseList.


        :param client: The client of this CourseList.  # noqa: E501
        :type: Client
        """

        self._client = client

    @property
    def total_consumed_lessons(self):
        """Gets the total_consumed_lessons of this CourseList.  # noqa: E501


        :return: The total_consumed_lessons of this CourseList.  # noqa: E501
        :rtype: int
        """
        return self._total_consumed_lessons

    @total_consumed_lessons.setter
    def total_consumed_lessons(self, total_consumed_lessons):
        """Sets the total_consumed_lessons of this CourseList.


        :param total_consumed_lessons: The total_consumed_lessons of this CourseList.  # noqa: E501
        :type: int
        """

        self._total_consumed_lessons = total_consumed_lessons

    @property
    def remaining_lessons(self):
        """Gets the remaining_lessons of this CourseList.  # noqa: E501


        :return: The remaining_lessons of this CourseList.  # noqa: E501
        :rtype: int
        """
        return self._remaining_lessons

    @remaining_lessons.setter
    def remaining_lessons(self, remaining_lessons):
        """Sets the remaining_lessons of this CourseList.


        :param remaining_lessons: The remaining_lessons of this CourseList.  # noqa: E501
        :type: int
        """

        self._remaining_lessons = remaining_lessons

    @property
    def total_lessons(self):
        """Gets the total_lessons of this CourseList.  # noqa: E501


        :return: The total_lessons of this CourseList.  # noqa: E501
        :rtype: int
        """
        return self._total_lessons

    @total_lessons.setter
    def total_lessons(self, total_lessons):
        """Sets the total_lessons of this CourseList.


        :param total_lessons: The total_lessons of this CourseList.  # noqa: E501
        :type: int
        """

        self._total_lessons = total_lessons

    @property
    def course_name(self):
        """Gets the course_name of this CourseList.  # noqa: E501


        :return: The course_name of this CourseList.  # noqa: E501
        :rtype: str
        """
        return self._course_name

    @course_name.setter
    def course_name(self, course_name):
        """Sets the course_name of this CourseList.


        :param course_name: The course_name of this CourseList.  # noqa: E501
        :type: str
        """
        if course_name is None:
            raise ValueError("Invalid value for `course_name`, must not be `None`")  # noqa: E501

        self._course_name = course_name

    @property
    def class_length(self):
        """Gets the class_length of this CourseList.  # noqa: E501


        :return: The class_length of this CourseList.  # noqa: E501
        :rtype: int
        """
        return self._class_length

    @class_length.setter
    def class_length(self, class_length):
        """Sets the class_length of this CourseList.


        :param class_length: The class_length of this CourseList.  # noqa: E501
        :type: int
        """
        if class_length is None:
            raise ValueError("Invalid value for `class_length`, must not be `None`")  # noqa: E501

        self._class_length = class_length

    @property
    def class_fee(self):
        """Gets the class_fee of this CourseList.  # noqa: E501


        :return: The class_fee of this CourseList.  # noqa: E501
        :rtype: int
        """
        return self._class_fee

    @class_fee.setter
    def class_fee(self, class_fee):
        """Sets the class_fee of this CourseList.


        :param class_fee: The class_fee of this CourseList.  # noqa: E501
        :type: int
        """
        if class_fee is None:
            raise ValueError("Invalid value for `class_fee`, must not be `None`")  # noqa: E501

        self._class_fee = class_fee

    @property
    def color(self):
        """Gets the color of this CourseList.  # noqa: E501


        :return: The color of this CourseList.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this CourseList.


        :param color: The color of this CourseList.  # noqa: E501
        :type: str
        """

        self._color = color

    @property
    def create_time(self):
        """Gets the create_time of this CourseList.  # noqa: E501


        :return: The create_time of this CourseList.  # noqa: E501
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this CourseList.


        :param create_time: The create_time of this CourseList.  # noqa: E501
        :type: datetime
        """

        self._create_time = create_time

    @property
    def update_time(self):
        """Gets the update_time of this CourseList.  # noqa: E501


        :return: The update_time of this CourseList.  # noqa: E501
        :rtype: datetime
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this CourseList.


        :param update_time: The update_time of this CourseList.  # noqa: E501
        :type: datetime
        """

        self._update_time = update_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CourseList, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CourseList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
