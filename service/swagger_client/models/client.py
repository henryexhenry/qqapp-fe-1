# coding: utf-8

"""
    QQAPP API

    QQAPP API Description  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Client(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'client_name': 'str',
        'wechat_id': 'str',
        'avatar': 'str',
        'gender': 'int',
        'birthday': 'datetime',
        'remark': 'str',
        'create_time': 'datetime',
        'update_time': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'client_name': 'client_name',
        'wechat_id': 'wechat_id',
        'avatar': 'avatar',
        'gender': 'gender',
        'birthday': 'birthday',
        'remark': 'remark',
        'create_time': 'create_time',
        'update_time': 'update_time'
    }

    def __init__(self, id=None, client_name=None, wechat_id=None, avatar=None, gender=None, birthday=None, remark=None, create_time=None, update_time=None):  # noqa: E501
        """Client - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._client_name = None
        self._wechat_id = None
        self._avatar = None
        self._gender = None
        self._birthday = None
        self._remark = None
        self._create_time = None
        self._update_time = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.client_name = client_name
        self.wechat_id = wechat_id
        if avatar is not None:
            self.avatar = avatar
        self.gender = gender
        if birthday is not None:
            self.birthday = birthday
        if remark is not None:
            self.remark = remark
        if create_time is not None:
            self.create_time = create_time
        if update_time is not None:
            self.update_time = update_time

    @property
    def id(self):
        """Gets the id of this Client.  # noqa: E501


        :return: The id of this Client.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Client.


        :param id: The id of this Client.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def client_name(self):
        """Gets the client_name of this Client.  # noqa: E501


        :return: The client_name of this Client.  # noqa: E501
        :rtype: str
        """
        return self._client_name

    @client_name.setter
    def client_name(self, client_name):
        """Sets the client_name of this Client.


        :param client_name: The client_name of this Client.  # noqa: E501
        :type: str
        """
        if client_name is None:
            raise ValueError("Invalid value for `client_name`, must not be `None`")  # noqa: E501

        self._client_name = client_name

    @property
    def wechat_id(self):
        """Gets the wechat_id of this Client.  # noqa: E501


        :return: The wechat_id of this Client.  # noqa: E501
        :rtype: str
        """
        return self._wechat_id

    @wechat_id.setter
    def wechat_id(self, wechat_id):
        """Sets the wechat_id of this Client.


        :param wechat_id: The wechat_id of this Client.  # noqa: E501
        :type: str
        """
        if wechat_id is None:
            raise ValueError("Invalid value for `wechat_id`, must not be `None`")  # noqa: E501

        self._wechat_id = wechat_id

    @property
    def avatar(self):
        """Gets the avatar of this Client.  # noqa: E501


        :return: The avatar of this Client.  # noqa: E501
        :rtype: str
        """
        return self._avatar

    @avatar.setter
    def avatar(self, avatar):
        """Sets the avatar of this Client.


        :param avatar: The avatar of this Client.  # noqa: E501
        :type: str
        """

        self._avatar = avatar

    @property
    def gender(self):
        """Gets the gender of this Client.  # noqa: E501


        :return: The gender of this Client.  # noqa: E501
        :rtype: int
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this Client.


        :param gender: The gender of this Client.  # noqa: E501
        :type: int
        """
        if gender is None:
            raise ValueError("Invalid value for `gender`, must not be `None`")  # noqa: E501

        self._gender = gender

    @property
    def birthday(self):
        """Gets the birthday of this Client.  # noqa: E501


        :return: The birthday of this Client.  # noqa: E501
        :rtype: datetime
        """
        return self._birthday

    @birthday.setter
    def birthday(self, birthday):
        """Sets the birthday of this Client.


        :param birthday: The birthday of this Client.  # noqa: E501
        :type: datetime
        """

        self._birthday = birthday

    @property
    def remark(self):
        """Gets the remark of this Client.  # noqa: E501


        :return: The remark of this Client.  # noqa: E501
        :rtype: str
        """
        return self._remark

    @remark.setter
    def remark(self, remark):
        """Sets the remark of this Client.


        :param remark: The remark of this Client.  # noqa: E501
        :type: str
        """

        self._remark = remark

    @property
    def create_time(self):
        """Gets the create_time of this Client.  # noqa: E501


        :return: The create_time of this Client.  # noqa: E501
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Client.


        :param create_time: The create_time of this Client.  # noqa: E501
        :type: datetime
        """

        self._create_time = create_time

    @property
    def update_time(self):
        """Gets the update_time of this Client.  # noqa: E501


        :return: The update_time of this Client.  # noqa: E501
        :rtype: datetime
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Client.


        :param update_time: The update_time of this Client.  # noqa: E501
        :type: datetime
        """

        self._update_time = update_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Client, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Client):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
