# coding: utf-8

"""
    QQAPP API

    QQAPP API Description  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ClassSessionList(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'course': 'Course',
        'status': 'int',
        'lessons': 'int',
        'start_time': 'datetime',
        'end_time': 'datetime',
        'comment': 'str',
        'create_time': 'datetime',
        'update_time': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'course': 'course',
        'status': 'status',
        'lessons': 'lessons',
        'start_time': 'start_time',
        'end_time': 'end_time',
        'comment': 'comment',
        'create_time': 'create_time',
        'update_time': 'update_time'
    }

    def __init__(self, id=None, course=None, status=None, lessons=None, start_time=None, end_time=None, comment=None, create_time=None, update_time=None):  # noqa: E501
        """ClassSessionList - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._course = None
        self._status = None
        self._lessons = None
        self._start_time = None
        self._end_time = None
        self._comment = None
        self._create_time = None
        self._update_time = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if course is not None:
            self.course = course
        if status is not None:
            self.status = status
        self.lessons = lessons
        self.start_time = start_time
        self.end_time = end_time
        if comment is not None:
            self.comment = comment
        if create_time is not None:
            self.create_time = create_time
        if update_time is not None:
            self.update_time = update_time

    @property
    def id(self):
        """Gets the id of this ClassSessionList.  # noqa: E501


        :return: The id of this ClassSessionList.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ClassSessionList.


        :param id: The id of this ClassSessionList.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def course(self):
        """Gets the course of this ClassSessionList.  # noqa: E501


        :return: The course of this ClassSessionList.  # noqa: E501
        :rtype: Course
        """
        return self._course

    @course.setter
    def course(self, course):
        """Sets the course of this ClassSessionList.


        :param course: The course of this ClassSessionList.  # noqa: E501
        :type: Course
        """

        self._course = course

    @property
    def status(self):
        """Gets the status of this ClassSessionList.  # noqa: E501


        :return: The status of this ClassSessionList.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ClassSessionList.


        :param status: The status of this ClassSessionList.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def lessons(self):
        """Gets the lessons of this ClassSessionList.  # noqa: E501


        :return: The lessons of this ClassSessionList.  # noqa: E501
        :rtype: int
        """
        return self._lessons

    @lessons.setter
    def lessons(self, lessons):
        """Sets the lessons of this ClassSessionList.


        :param lessons: The lessons of this ClassSessionList.  # noqa: E501
        :type: int
        """
        if lessons is None:
            raise ValueError("Invalid value for `lessons`, must not be `None`")  # noqa: E501

        self._lessons = lessons

    @property
    def start_time(self):
        """Gets the start_time of this ClassSessionList.  # noqa: E501


        :return: The start_time of this ClassSessionList.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this ClassSessionList.


        :param start_time: The start_time of this ClassSessionList.  # noqa: E501
        :type: datetime
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")  # noqa: E501

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this ClassSessionList.  # noqa: E501


        :return: The end_time of this ClassSessionList.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this ClassSessionList.


        :param end_time: The end_time of this ClassSessionList.  # noqa: E501
        :type: datetime
        """
        if end_time is None:
            raise ValueError("Invalid value for `end_time`, must not be `None`")  # noqa: E501

        self._end_time = end_time

    @property
    def comment(self):
        """Gets the comment of this ClassSessionList.  # noqa: E501


        :return: The comment of this ClassSessionList.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this ClassSessionList.


        :param comment: The comment of this ClassSessionList.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def create_time(self):
        """Gets the create_time of this ClassSessionList.  # noqa: E501


        :return: The create_time of this ClassSessionList.  # noqa: E501
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this ClassSessionList.


        :param create_time: The create_time of this ClassSessionList.  # noqa: E501
        :type: datetime
        """

        self._create_time = create_time

    @property
    def update_time(self):
        """Gets the update_time of this ClassSessionList.  # noqa: E501


        :return: The update_time of this ClassSessionList.  # noqa: E501
        :rtype: datetime
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this ClassSessionList.


        :param update_time: The update_time of this ClassSessionList.  # noqa: E501
        :type: datetime
        """

        self._update_time = update_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClassSessionList, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClassSessionList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
