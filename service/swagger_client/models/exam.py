# coding: utf-8

"""
    QQAPP API

    QQAPP API Description  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Exam(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'level': 'int',
        'exam_date': 'datetime',
        'type': 'int',
        'act_mark': 'float',
        'result': 'str',
        'create_time': 'datetime',
        'update_time': 'datetime',
        'order': 'str'
    }

    attribute_map = {
        'id': 'id',
        'level': 'level',
        'exam_date': 'exam_date',
        'type': 'type',
        'act_mark': 'act_mark',
        'result': 'result',
        'create_time': 'create_time',
        'update_time': 'update_time',
        'order': 'order'
    }

    def __init__(self, id=None, level=None, exam_date=None, type=None, act_mark=None, result=None, create_time=None, update_time=None, order=None):  # noqa: E501
        """Exam - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._level = None
        self._exam_date = None
        self._type = None
        self._act_mark = None
        self._result = None
        self._create_time = None
        self._update_time = None
        self._order = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.level = level
        self.exam_date = exam_date
        if type is not None:
            self.type = type
        self.act_mark = act_mark
        if result is not None:
            self.result = result
        if create_time is not None:
            self.create_time = create_time
        if update_time is not None:
            self.update_time = update_time
        self.order = order

    @property
    def id(self):
        """Gets the id of this Exam.  # noqa: E501


        :return: The id of this Exam.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Exam.


        :param id: The id of this Exam.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def level(self):
        """Gets the level of this Exam.  # noqa: E501


        :return: The level of this Exam.  # noqa: E501
        :rtype: int
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this Exam.


        :param level: The level of this Exam.  # noqa: E501
        :type: int
        """
        if level is None:
            raise ValueError("Invalid value for `level`, must not be `None`")  # noqa: E501

        self._level = level

    @property
    def exam_date(self):
        """Gets the exam_date of this Exam.  # noqa: E501


        :return: The exam_date of this Exam.  # noqa: E501
        :rtype: datetime
        """
        return self._exam_date

    @exam_date.setter
    def exam_date(self, exam_date):
        """Sets the exam_date of this Exam.


        :param exam_date: The exam_date of this Exam.  # noqa: E501
        :type: datetime
        """
        if exam_date is None:
            raise ValueError("Invalid value for `exam_date`, must not be `None`")  # noqa: E501

        self._exam_date = exam_date

    @property
    def type(self):
        """Gets the type of this Exam.  # noqa: E501


        :return: The type of this Exam.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Exam.


        :param type: The type of this Exam.  # noqa: E501
        :type: int
        """

        self._type = type

    @property
    def act_mark(self):
        """Gets the act_mark of this Exam.  # noqa: E501


        :return: The act_mark of this Exam.  # noqa: E501
        :rtype: float
        """
        return self._act_mark

    @act_mark.setter
    def act_mark(self, act_mark):
        """Sets the act_mark of this Exam.


        :param act_mark: The act_mark of this Exam.  # noqa: E501
        :type: float
        """
        if act_mark is None:
            raise ValueError("Invalid value for `act_mark`, must not be `None`")  # noqa: E501

        self._act_mark = act_mark

    @property
    def result(self):
        """Gets the result of this Exam.  # noqa: E501


        :return: The result of this Exam.  # noqa: E501
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this Exam.


        :param result: The result of this Exam.  # noqa: E501
        :type: str
        """

        self._result = result

    @property
    def create_time(self):
        """Gets the create_time of this Exam.  # noqa: E501


        :return: The create_time of this Exam.  # noqa: E501
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Exam.


        :param create_time: The create_time of this Exam.  # noqa: E501
        :type: datetime
        """

        self._create_time = create_time

    @property
    def update_time(self):
        """Gets the update_time of this Exam.  # noqa: E501


        :return: The update_time of this Exam.  # noqa: E501
        :rtype: datetime
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Exam.


        :param update_time: The update_time of this Exam.  # noqa: E501
        :type: datetime
        """

        self._update_time = update_time

    @property
    def order(self):
        """Gets the order of this Exam.  # noqa: E501


        :return: The order of this Exam.  # noqa: E501
        :rtype: str
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this Exam.


        :param order: The order of this Exam.  # noqa: E501
        :type: str
        """
        if order is None:
            raise ValueError("Invalid value for `order`, must not be `None`")  # noqa: E501

        self._order = order

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Exam, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Exam):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
